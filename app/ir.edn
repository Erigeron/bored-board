{:package "app",
 :root {:ns "main", :def "main!"},
 :files {"comp.profile" {:ns ["ns"
                              "app.comp.profile"
                              [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div" "a"]]]
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "app.schema" ":as" "schema"]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo-ui.style.colors" ":as" "colors"]
                               ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                               ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]]],
                         :defs {"on-log-out" ["defn"
                                              "on-log-out"
                                              ["e" "dispatch!"]
                                              ["dispatch!" ":user/log-out" "nil"]
                                              [".removeItem" "js/localStorage" [":storage-key" "schema/configs"]]],
                                "comp-profile" ["defcomp"
                                                "comp-profile"
                                                ["user"]
                                                ["div"
                                                 ["{}" [":style" "ui/flex"]]
                                                 ["<>" "span" ["str" "|Hello! " [":name" "user"]] "nil"]
                                                 ["=<" "8" "nil"]
                                                 ["a"
                                                  ["{}"
                                                   [":style" "style-trigger"]
                                                   [":event" ["{}" [":click" "on-log-out"]]]]
                                                  ["<>" "span" "|Log out" "nil"]]]],
                                "style-trigger" ["def"
                                                 "style-trigger"
                                                 ["{}"
                                                  [":font-size" "14"]
                                                  [":cursor" ":pointer"]
                                                  [":background-color" "colors/motif-light"]
                                                  [":color" ":white"]
                                                  [":padding" "|0 8px"]]]},
                         :procs []},
         "comp.workspace" {:ns ["ns"
                                "app.comp.workspace"
                                [":require-macros"
                                 ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div" "a"]]]
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "app.schema" ":as" "schema"]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo-ui.style.colors" ":as" "colors"]
                                 ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                 ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                                 ["[]" "app.comp.board" ":refer" ["[]" "comp-board"]]
                                 ["[]" "app.comp.resizer" ":refer" ["[]" "comp-resizer"]]
                                 ["[]" "app.comp.palette" ":refer" ["[]" "comp-palette"]]]],
                           :defs {"comp-workspace" ["defcomp"
                                                    "comp-workspace"
                                                    ["states" "store"]
                                                    ["div"
                                                     ["{}" [":style" "style-workspace"]]
                                                     ["comp-resizer" [":size" "store"] "|3/1/3/1"]
                                                     ["comp-board" [":size" "store"] [":board" "store"] "|1/1/2/1"]
                                                     ["comp-palette"
                                                      ["get-in" "store" ["[]" ":session" ":color"]]
                                                      "|1/2/2/2"]]],
                                  "style-workspace" ["def"
                                                     "style-workspace"
                                                     ["{}"
                                                      [":display" ":grid"]
                                                      [":grid-template-rows" "|1fr 1fr 80px"]
                                                      [":grid-template-columns" "|2fr 1fr"]]]},
                           :procs []},
         "comp.board" {:ns ["ns"
                            "app.comp.board"
                            [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div" "a"]]]
                            [":require"
                             ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                             ["[]" "app.schema" ":as" "schema"]
                             ["[]" "respo-ui.style" ":as" "ui"]
                             ["[]" "respo-ui.style.colors" ":as" "colors"]
                             ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                             ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                             ["[]" "respo.comp.inspect" ":refer" ["[]" "comp-inspect"]]]],
                       :defs {"comp-board" ["defcomp"
                                            "comp-board"
                                            ["size" "board" "grid-area"]
                                            ["let"
                                             [["digits" ["range" "1" ["inc" "size"]]]
                                              ["spots"
                                               ["mapcat"
                                                ["fn" ["x"] ["map" ["fn" ["y"] ["{}" [":x" "x"] [":y" "y"]]] "digits"]]
                                                "digits"]]]
                                             ["div"
                                              ["{}"
                                               [":style" ["merge" "style-container" ["{}" [":grid-area" "grid-area"]]]]]
                                              ["div"
                                               ["{}" [":style" "style-board"]]
                                               ["->>"
                                                "spots"
                                                ["map"
                                                 ["fn"
                                                  ["position"]
                                                  ["let"
                                                   [["k" ["str" [":x" "position"] "|/" [":y" "position"]]]]
                                                   ["[]"
                                                    ["str" [":x" "position"] "|-" [":y" "position"]]
                                                    ["div"
                                                     ["{}"
                                                      [":style"
                                                       ["merge"
                                                        "style-spot"
                                                        ["{}"
                                                         [":grid-area" ["str" [":x" "position"] "|/" [":y" "position"]]]]
                                                        ["if"
                                                         ["contains?" "board" "k"]
                                                         ["{}"
                                                          [":border-radius" "|50%"]
                                                          [":box-shadow" "|0 0 4px gray"]]]
                                                        ["if"
                                                         ["contains?" "board" "k"]
                                                         ["{}" [":background-color" ["get" "board" "k"]]]]]]
                                                      [":event" ["{}" [":click" ["on-draw" "position"]]]]]]]]]]]]]]],
                              "style-board" ["def"
                                             "style-board"
                                             ["{}"
                                              [":display" ":grid"]
                                              [":justify-items" ":stretch"]
                                              [":align-items" ":stretch"]
                                              [":width" "600"]
                                              [":height" "600"]
                                              [":grid-gap" "|4px"]]],
                              "style-container" ["def"
                                                 "style-container"
                                                 ["{}" [":position" ":relative"] [":width" "|100%"] [":height" "|100%"]]],
                              "style-spot" ["def"
                                            "style-spot"
                                            ["{}"
                                             [":background-color" ["hsl" "0" "0" "90"]]
                                             [":cursor" ":pointer"]
                                             [":border-radius" "|2px"]]],
                              "on-draw" ["defn"
                                         "on-draw"
                                         ["position"]
                                         ["fn"
                                          ["e" "dispatch!" "mutate!"]
                                          ["dispatch!" ":board/draw" ["str" [":x" "position"] "|/" [":y" "position"]]]]]},
                       :procs []},
         "schema" {:ns ["ns" "app.schema"],
                   :defs {"configs" ["def" "configs" ["{}" [":storage-key" "|workflow-storage"] [":port" "5021"]]]},
                   :procs []},
         "comp.container" {:ns ["ns"
                                "app.comp.container"
                                [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "div" "span"]]]
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo-ui.style.colors" ":as" "colors"]
                                 ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                 ["[]" "respo.comp.inspect" ":refer" ["[]" "comp-inspect"]]
                                 ["[]" "app.comp.header" ":refer" ["[]" "comp-header"]]
                                 ["[]" "app.comp.profile" ":refer" ["[]" "comp-profile"]]
                                 ["[]" "app.comp.login" ":refer" ["[]" "comp-login"]]
                                 ["[]" "respo-message.comp.msg-list" ":refer" ["[]" "comp-msg-list"]]
                                 ["[]" "app.comp.workspace" ":refer" ["[]" "comp-workspace"]]]],
                           :defs {"style-alert" ["def"
                                                 "style-alert"
                                                 ["{}"
                                                  [":font-family" "|Josefin Sans"]
                                                  [":font-weight" "100"]
                                                  [":font-size" "40"]]],
                                  "comp-container" ["defcomp"
                                                    "comp-container"
                                                    ["states" "store"]
                                                    ["let"
                                                     [["state" [":data" "states"]]]
                                                     ["if"
                                                      ["nil?" "store"]
                                                      ["div"
                                                       ["{}"
                                                        [":style" ["merge" "ui/global" "ui/fullscreen" "ui/center"]]]
                                                       ["<>" "span" "|No connection!" "style-alert"]]
                                                      ["div"
                                                       ["{}"
                                                        [":style"
                                                         ["merge" "ui/global" "ui/fullscreen" "style-container"]]]
                                                       ["comp-header" [":logged-in?" "store"]]
                                                       ["div"
                                                        ["{}" [":style" "style-body"]]
                                                        ["div"
                                                         ["{}" [":style" "style-body"]]
                                                         ["if"
                                                          [":logged-in?" "store"]
                                                          ["let"
                                                           [["router" [":router" "store"]]]
                                                           ["case"
                                                            [":name" "router"]
                                                            [":home" ["comp-workspace" "states" "store"]]
                                                            [":profile" ["comp-profile" [":user" "store"]]]
                                                            ["div"
                                                             ["{}"]
                                                             ["<>"
                                                              "span"
                                                              ["str" "|404 page: " ["pr-str" "router"]]
                                                              "nil"]]]]
                                                          ["comp-login" "states"]]]]
                                                       ["comp-inspect" "|Store" "store" "style-debugger"]
                                                       ["comp-msg-list"
                                                        ["get-in" "store" ["[]" ":session" ":notifications"]]
                                                        ":session/remove-notification"]]]]],
                                  "style-debugger" ["def"
                                                    "style-debugger"
                                                    ["{}" [":bottom" "0"] [":left" "0"] [":max-width" "|100%"]]],
                                  "style-body" ["def"
                                                "style-body"
                                                ["{}"
                                                 [":padding" "|8px 16px"]
                                                 [":grid-row" "|2/2"]
                                                 [":grid-column" "|1/1"]]],
                                  "style-container" ["def"
                                                     "style-container"
                                                     ["{}"
                                                      [":display" ":grid"]
                                                      [":grid-gap" "|16px 16px"]
                                                      [":justify-items" ":stretch"]
                                                      [":align-items" ":stretch"]
                                                      [":grid-template-rows" "|60px 1fr"]
                                                      [":grid-template-columns" "|1fr"]]]},
                           :procs []},
         "main" {:ns ["ns"
                      "app.main"
                      [":require"
                       ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "realize-ssr!"]]
                       ["[]" "respo.cursor" ":refer" ["[]" "mutate"]]
                       ["[]" "app.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "app.network" ":refer" ["[]" "send!" "setup-socket!"]]
                       ["[]" "app.schema" ":as" "schema"]]],
                 :defs {"ssr?" ["def" "ssr?" ["some?" [".querySelector" "js/document" "|meta.respo-ssr"]]],
                        "dispatch!" ["defn"
                                     "dispatch!"
                                     ["op" "op-data"]
                                     ["println" "|dispatch:" "op" "op-data"]
                                     ["if"
                                      ["=" "op" ":states"]
                                      ["let"
                                       [["new-states" [["mutate" "op-data"] "@*states"]]]
                                       ["println" "|states:" "new-states"]
                                       ["reset!" "*states" "new-states"]
                                       ["--" "swap!" "*states" ["mutate" "op-data"]]]
                                      ["send!" "op" "op-data"]]],
                        "*store" ["defonce" "*store" ["atom" "nil"]],
                        "main!" ["defn"
                                 "main!"
                                 []
                                 ["if" "ssr?" ["render-app!" "realize-ssr!"]]
                                 ["render-app!" "render!"]
                                 ["setup-socket!"
                                  "*store"
                                  ["{}"
                                   [":url"
                                    ["str" "|ws://" [".-hostname" "js/location"] "|:" [":port" "schema/configs"]]]
                                   [":on-close!"
                                    ["fn"
                                     ["event"]
                                     ["reset!" "*store" "nil"]
                                     [".error" "js/console" "|Lost connection!"]]]
                                   [":on-open!" ["fn" ["event"] ["simulate-login!"]]]]]
                                 ["add-watch" "*store" ":changes" ["fn" [] ["render-app!" "render!"]]]
                                 ["add-watch" "*states" ":changes" ["fn" [] ["render-app!" "render!"]]]
                                 ["println" "|App started!"]],
                        "*states" ["defonce" "*states" ["atom" ["{}"]]],
                        "simulate-login!" ["defn"
                                           "simulate-login!"
                                           []
                                           ["let"
                                            [["raw" [".getItem" "js/localStorage" [":storage-key" "schema/configs"]]]]
                                            ["if"
                                             ["some?" "raw"]
                                             ["do"
                                              ["println" "|Found storage."]
                                              ["dispatch!" ":user/log-in" ["read-string" "raw"]]]
                                             ["do" ["println" "|Found no storage."]]]]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       ["renderer"]
                                       ["renderer" "mount-target" ["comp-container" "@*states" "@*store"] "dispatch!"]],
                        "reload!" ["defn"
                                   "reload!"
                                   []
                                   ["clear-cache!"]
                                   ["render-app!" "render!"]
                                   ["println" "|Code updated."]],
                        "mount-target" ["def" "mount-target" [".querySelector" "js/document" "|.app"]]},
                 :procs [["set!" "js/window.onload" "main!"]]},
         "network" {:ns ["ns"
                         "app.network"
                         [":require-macros" ["[]" "cljs.core.async.macros" ":refer" ["[]" "go"]]]
                         [":require"
                          ["[]" "cljs.reader" ":as" "reader"]
                          ["[]" "cljs.core.async" ":as" "a" ":refer" ["[]" ">!" "<!" "chan" "timeout"]]
                          ["[]" "recollect.patch" ":refer" ["[]" "patch-bunch"]]]],
                    :defs {"sender" ["defonce" "sender" ["chan"]],
                           "send!" ["defn" "send!" ["op" "op-data"] ["go" [">!" "sender" ["[]" "op" "op-data"]]]],
                           "setup-socket!" ["defn"
                                            "setup-socket!"
                                            ["*store" "configs"]
                                            ["let"
                                             [["ws-url" [":url" "configs"]]
                                              ["ws" ["js/WebSocket." "ws-url"]]
                                              ["handle-close!"
                                               ["if"
                                                ["fn?" [":on-close!" "configs"]]
                                                [":on-close!" "configs"]
                                                "identity"]]
                                              ["handle-open!"
                                               ["if" ["fn?" [":on-open!" "configs"]] [":on-open!" "configs"] "identity"]]]
                                             ["set!" "ws.onopen" ["fn" ["event"] ["handle-open!" "event"]]]
                                             ["set!" "ws.onclose" ["fn" ["event"] ["handle-close!" "event"]]]
                                             ["set!"
                                              "ws.onmessage"
                                              ["fn"
                                               ["event"]
                                               ["let"
                                                [["changes" ["reader/read-string" "event.data"]]]
                                                ["println" "|Changes" "changes"]
                                                ["reset!" "*store" ["patch-bunch" "@*store" "changes"]]]]]
                                             ["go" ["loop" ["[]"] [".send" "ws" ["pr-str" ["<!" "sender"]]] ["recur"]]]]]},
                    :procs []},
         "comp.login" {:ns ["ns"
                            "app.comp.login"
                            [":require-macros"
                             ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "div" "input" "button" "span"]]]
                            [":require"
                             ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                             ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                             ["[]" "respo.comp.inspect" ":refer" ["[]" "comp-inspect"]]
                             ["[]" "respo-ui.style" ":as" "ui"]
                             ["[]" "app.schema" ":as" "schema"]]],
                       :defs {"on-submit" ["defn"
                                           "on-submit"
                                           ["username" "password" "signup?"]
                                           ["fn"
                                            ["e" "dispatch!"]
                                            ["dispatch!"
                                             ["if" "signup?" ":user/sign-up" ":user/log-in"]
                                             ["[]" "username" "password"]]
                                            [".setItem"
                                             "js/localStorage"
                                             [":storage-key" "schema/configs"]
                                             ["[]" "username" "password"]]]],
                              "on-input" ["defn"
                                          "on-input"
                                          ["state" "k"]
                                          ["fn"
                                           ["e" "dispatch!" "mutate!"]
                                           ["mutate!" ["assoc" "state" "k" [":value" "e"]]]]],
                              "comp-login" ["defcomp"
                                            "comp-login"
                                            ["states"]
                                            ["let"
                                             [["state" ["or" [":data" "states"] "initial-state"]]]
                                             ["div"
                                              ["{}"]
                                              ["div"
                                               ["{}" [":style" ["{}"]]]
                                               ["div"
                                                ["{}"]
                                                ["input"
                                                 ["{}"
                                                  [":placeholder" "|Username"]
                                                  [":value" [":username" "state"]]
                                                  [":style" "ui/input"]
                                                  [":event" ["{}" [":input" ["on-input" "state" ":username"]]]]]]]
                                               ["=<" "nil" "8"]
                                               ["div"
                                                ["{}"]
                                                ["input"
                                                 ["{}"
                                                  [":placeholder" "|Password"]
                                                  [":value" [":password" "state"]]
                                                  [":style" "ui/input"]
                                                  [":event" ["{}" [":input" ["on-input" "state" ":password"]]]]]]]]
                                              ["=<" "nil" "8"]
                                              ["div"
                                               ["{}" [":style" "ui/flex"]]
                                               ["button"
                                                ["{}"
                                                 [":inner-text" "|Sign up"]
                                                 [":style"
                                                  ["merge" "ui/button" ["{}" [":outline" ":none"] [":border" ":none"]]]]
                                                 [":event"
                                                  ["{}"
                                                   [":click"
                                                    ["on-submit" [":username" "state"] [":password" "state"] "true"]]]]]]
                                               ["=<" "8" "nil"]
                                               ["button"
                                                ["{}"
                                                 [":inner-text" "|Sign in"]
                                                 [":style"
                                                  ["merge" "ui/button" ["{}" [":outline" ":none"] [":border" ":none"]]]]
                                                 [":event"
                                                  ["{}"
                                                   [":click"
                                                    ["on-submit" [":username" "state"] [":password" "state"] "false"]]]]]]]]]],
                              "initial-state" ["def" "initial-state" ["{}" [":username" "|"] [":password" "|"]]]},
                       :procs []},
         "comp.chatroom" {:ns ["ns" "app.comp.chatroom"], :defs {}, :procs []},
         "comp.palette" {:ns ["ns"
                              "app.comp.palette"
                              [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div" "a"]]]
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "app.schema" ":as" "schema"]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo-ui.style.colors" ":as" "colors"]
                               ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                               ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]]],
                         :defs {"comp-palette" ["defcomp"
                                                "comp-palette"
                                                ["color" "position"]
                                                ["div"
                                                 ["{}"
                                                  [":style" ["merge" "style-palette" ["{}" [":grid-area" "position"]]]]]
                                                 ["->>"
                                                  "color-layouts"
                                                  ["map"
                                                   ["fn"
                                                    ["entry"]
                                                    ["let"
                                                     [[["[]" "color-name" "position"] "entry"]]
                                                     ["[]"
                                                      "color-name"
                                                      ["div"
                                                       ["{}"
                                                        [":style"
                                                         ["merge"
                                                          "style-color"
                                                          ["{}"
                                                           [":grid-area" "position"]
                                                           [":background-color" "color-name"]]
                                                          ["if"
                                                           ["=" "color" "color-name"]
                                                           ["{}" [":border" "|2px solid blue"]]]]]
                                                        [":event" ["{}" [":click" ["on-pick" "color-name"]]]]]]]]]]]]],
                                "color-layouts" ["def"
                                                 "color-layouts"
                                                 ["{}"
                                                  [":purple" "|1/1/1/1"]
                                                  [":red" "|1/2/1/2"]
                                                  [":yellow" "|1/3/1/3"]
                                                  [":black" "|2/1/2/1"]
                                                  [":random" "|2/2/2/2"]
                                                  [":white" "|2/3/2/3"]
                                                  [":blue" "|3/1/3/1"]
                                                  [":cyan" "|3/2/3/2"]
                                                  [":green" "|3/3/3/3"]]],
                                "style-palette" ["def"
                                                 "style-palette"
                                                 ["{}"
                                                  [":display" ":grid"]
                                                  [":grid-template-rows" "|1fr 1fr 1fr"]
                                                  [":grid-template-columns" "|1fr 1fr 1fr"]
                                                  [":grid-gap" "|8px"]
                                                  [":width" "160"]
                                                  [":height" "160"]]],
                                "style-color" ["def" "style-color" ["{}" [":min-width" "40"] [":min-height" "40"]]],
                                "on-pick" ["defn"
                                           "on-pick"
                                           ["color-name"]
                                           ["fn" ["e" "dispatch!" "mutate!"] ["dispatch!" ":board/pick" "color-name"]]]},
                         :procs []},
         "render" {:ns ["ns"
                        "app.render"
                        [":require"
                         ["[]" "respo.render.html" ":refer" ["[]" "make-string"]]
                         ["[]" "shell-page.core" ":refer" ["[]" "make-page" "spit" "slurp"]]
                         ["[]" "app.comp.container" ":refer" ["[]" "comp-container"]]]],
                   :defs {"main!" ["defn"
                                   "main!"
                                   []
                                   ["if"
                                    ["=" "js/process.env.env" "|dev"]
                                    ["spit" "|target/index.html" ["dev-page"]]
                                    ["spit" "|dist/index.html" ["prod-page"]]]],
                          "base-info" ["def"
                                       "base-info"
                                       ["{}"
                                        [":title" "|Cumulo"]
                                        [":icon" "|http://logo.cumulo.org/cumulo.png"]
                                        [":ssr" "nil"]
                                        [":inner-html" "nil"]]],
                          "dev-page" ["defn"
                                      "dev-page"
                                      []
                                      ["make-page"
                                       "|"
                                       ["merge"
                                        "base-info"
                                        ["{}"
                                         [":styles" ["[]"]]
                                         [":scripts" ["[]" "|/main.js" "|/browser/lib.js" "|/browser/main.js"]]]]]],
                          "prod-page" ["defn"
                                       "prod-page"
                                       []
                                       ["let"
                                        [["html-content" ["make-string" ["comp-container" ["{}"] "nil"]]]
                                         ["manifest" [".parse" "js/JSON" ["slurp" "|dist/assets-manifest.json"]]]
                                         ["cljs-manifest" [".parse" "js/JSON" ["slurp" "|dist/manifest.json"]]]]
                                        ["make-page"
                                         "html-content"
                                         ["merge"
                                          "base-info"
                                          ["{}"
                                           [":styles" ["[]" ["aget" "manifest" "|main.css"]]]
                                           [":scripts"
                                            ["[]"
                                             ["aget" "manifest" "|main.js"]
                                             ["->" "cljs-manifest" ["aget" "0"] ["aget" "|js-name"]]
                                             ["->" "cljs-manifest" ["aget" "1"] ["aget" "|js-name"]]]]]]]]]},
                   :procs []},
         "comp.header" {:ns ["ns"
                             "app.comp.header"
                             [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div"]]]
                             [":require"
                              ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                              ["[]" "respo-ui.style" ":as" "ui"]
                              ["[]" "respo-ui.style.colors" ":as" "colors"]
                              ["[]" "respo.core" ":refer" ["[]" "create-comp"]]]],
                        :defs {"on-profile" ["defn"
                                             "on-profile"
                                             ["e" "dispatch!"]
                                             ["dispatch!"
                                              ":router/change"
                                              ["{}" [":name" ":profile"] [":params" "nil"] [":router" "nil"]]]],
                               "style-logo" ["def" "style-logo" ["{}" [":cursor" ":pointer"] [":grid-area" "|1/1/1/1"]]],
                               "comp-header" ["defcomp"
                                              "comp-header"
                                              ["logged-in?"]
                                              ["div"
                                               ["{}" [":style" ["merge" "style-header"]]]
                                               ["div"
                                                ["{}" [":event" ["{}" [":click" "on-home"]]] [":style" "style-logo"]]
                                                ["<>" "span" "|B&B" "nil"]]
                                               ["div"
                                                ["{}"
                                                 [":style" "style-pointer"]
                                                 [":event" ["{}" [":click" "on-profile"]]]]
                                                ["<>" "span" ["if" "logged-in?" "|Me" "|Guest"] "nil"]]]],
                               "style-pointer" ["def"
                                                "style-pointer"
                                                ["{}" [":cursor" "|pointer"] [":grid-area" "|1/3/1/3"]]],
                               "style-header" ["def"
                                               "style-header"
                                               ["{}"
                                                [":background-color" "colors/motif"]
                                                [":justify-content" ":space-between"]
                                                [":padding" "|0 16px"]
                                                [":font-size" "16"]
                                                [":color" ":white"]
                                                [":grid-row" "|1/1"]
                                                [":grid-column" "|1/1"]
                                                [":display" ":grid"]
                                                [":grid-template-rows" "|1fr"]
                                                [":grid-template-columns" "|120px 1fr 120px"]
                                                [":justify-items" ":center"]
                                                [":align-items" ":center"]]],
                               "on-home" ["defn"
                                          "on-home"
                                          ["e" "dispatch!"]
                                          ["dispatch!"
                                           ":router/change"
                                           ["{}" [":name" ":home"] [":params" "nil"] [":router" "nil"]]]]},
                        :procs []},
         "comp.resizer" {:ns ["ns"
                              "app.comp.resizer"
                              [":require-macros"
                               ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "button" "div" "a"]]]
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "app.schema" ":as" "schema"]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo-ui.style.colors" ":as" "colors"]
                               ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                               ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]]],
                         :defs {"comp-resizer" ["defcomp"
                                                "comp-resizer"
                                                ["current-size" "grid-area"]
                                                ["div"
                                                 ["{}" [":style" ["{}" [":grid-area" "grid-area"]]]]
                                                 ["<>" "span" "current-size" "nil"]
                                                 ["=<" "8" "nil"]
                                                 ["button"
                                                  ["{}"
                                                   [":inner-text" "|increase"]
                                                   [":style" "ui/button"]
                                                   [":event" ["{}" [":click" "on-inc"]]]]]
                                                 ["=<" "8" "nil"]
                                                 ["button"
                                                  ["{}"
                                                   [":inner-text" "|decrease"]
                                                   [":style" "ui/button"]
                                                   [":event" ["{}" [":click" "on-dec"]]]]]
                                                 ["=<" "8" "nil"]
                                                 ["button"
                                                  ["{}"
                                                   [":inner-text" "|reset"]
                                                   [":style" "ui/button"]
                                                   [":event" ["{}" [":click" "on-reset"]]]]]]],
                                "on-inc" ["defn"
                                          "on-inc"
                                          ["e" "dispatch!" "mutate!"]
                                          ["dispatch!" ":board/increase" "nil"]],
                                "on-dec" ["defn"
                                          "on-dec"
                                          ["e" "dispatch!" "mutate!"]
                                          ["dispatch!" ":board/decrease" "nil"]],
                                "on-reset" ["defn"
                                            "on-reset"
                                            ["e" "dispatch!" "mutate!"]
                                            ["dispatch!" ":board/reset-board" "nil"]]},
                         :procs []}}}
